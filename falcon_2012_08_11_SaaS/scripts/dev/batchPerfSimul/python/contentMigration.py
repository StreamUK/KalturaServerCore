###### generated by PhPy.py ######
import time
import sys

from phpLibrary import *
from simulationEngine import *
def filterBadJobs(batchJob):
    return (batchJob.getStatus() == BatchJob.BATCHJOB_STATUS_FINISHED)
    
def jobExecutionTimeLimit(batchJob, jobExecutionTime):
    duration = max(batchJob.duration, 5 * 60)
    return min(jobExecutionTime, 15 * duration)
    
NEW_SCHEDULER = {'name' : 'PrioSVF',
	'class' : 'ShorterVideosFirstScheduler',
	'prio' : {1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 1000000},
	'jobExecutionTimeCallback' : jobExecutionTimeLimit,}
NEW_TOPOLOGY = {'name' : 'Existing',
	0 : [{'type' : 'linux', 
				'count' : 1,},
			{'type' : 'linux,maxPriority=5', 
				'count' : 47,},],
	1 : [{'type' : 'linux', 
				'count' : 1,},
			{'type' : 'linux,maxPriority=5', 
				'count' : 47,},],}
DUMMY_PARTNER_ID = 87654321
LONG_DUMMY_MIGRATION_JOBS = {'name' : 'longVidMigration',
	'queueTime' : time.mktime((2010, 12, 24, 0, 0, 0, 0, 0, 0)),
	'jobCount' : 4000,
	'minDuration' : 3600,
	'maxDuration' : 5400,
	'minProcessFactor' : 1,
	'maxProcessFactor' : 4,
	'priority' : 6,}
SHORT_DUMMY_MIGRATION_JOBS = {'name' : 'shortVidMigration',
	'queueTime' : time.mktime((2010, 12, 24, 0, 0, 0, 0, 0, 0)),
	'jobCount' : 80000,
	'minDuration' : 30,
	'maxDuration' : 300,
	'minProcessFactor' : 1,
	'maxProcessFactor' : 4,
	'priority' : 6,}
SIMULATIONS = [{'scheduler' : NEW_SCHEDULER, 'topology' : NEW_TOPOLOGY},
	{'scheduler' : NEW_SCHEDULER, 'topology' : NEW_TOPOLOGY, 'dummyJobsDetails' : LONG_DUMMY_MIGRATION_JOBS},
	{'scheduler' : NEW_SCHEDULER, 'topology' : NEW_TOPOLOGY, 'dummyJobsDetails' : SHORT_DUMMY_MIGRATION_JOBS},]
PARAMETERS = {'startTime' : 				time.mktime((2010, 12, 22, 0, 0, 0, 0, 0, 0)),
	'endTime' : 				time.mktime((2011, 1, 22, 0, 0, 0, 0, 0, 0)),
	'simulatedSchedulerIds' : 	[20, 40, 50, 60, 70, 80, 120, 140, 150, 160, 170, 180],
	'simulations' :			SIMULATIONS,
	'categories' :				["pid_%s" % (DUMMY_PARTNER_ID), "notpid_%s" % (DUMMY_PARTNER_ID)],
	'filterCallback' :			filterBadJobs,
	'minDuration' :			60,
	'minProcessTime' :			60,
	'debugLogEnabled' :		False,
	'dummyPartnerId' :			DUMMY_PARTNER_ID,}
(vars, cats, simulations) = simulationMain(PARAMETERS)
sys.stdout.write("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")
for cat in cats:
    # print column header
    sys.stdout.write("%s\t" % (cat))
    for var in vars:
        sys.stdout.write("%s\t" % (var))
        
    sys.stdout.write("\n")
    # print data
    for simulation in simulations.values():
        sys.stdout.write("%s\t" % (simulation.name))
        for var in vars:
            measures = simulation.getMeasures(cat, var)
            if (measures.has_key('average')):
                sys.stdout.write("%s\t" % (measures['average']))
                
            
        sys.stdout.write("\n")
        
    

