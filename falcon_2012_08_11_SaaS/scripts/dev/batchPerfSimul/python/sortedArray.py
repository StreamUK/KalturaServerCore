###### generated by PhPy.py ######
import time
import sys

#WARNING: passing args by reference not supported (&$array)
#WARNING: passing args by reference not supported (&$object)
def insertToSortedArray(array, object, getOrderFunc, searchedValue = None, context = None):
    if (searchedValue == None):
        searchedValue = getOrderFunc( object, context)
        
    # perform binary search for $searchedValue in $array
    high = len(array) - 1
    low = 0
    while ( high >= low ):
        probe = int((high + low) / 2)
        comparison = getOrderFunc( array[probe], context) - searchedValue
        if (comparison < 0):
            low = probe + 1
            
        elif (comparison > 0):
            high = probe - 1
            
        else:
            low = probe
            break
            
        
    # add the object to the array in the found index
    array.insert(low, object)
    
class SortedArray:
    FAW_CONTINUE = 0
    FAW_STOP = 1
    FAW_STOP_REMOVE = 2
    def __init__(self, getKeyFunc, getKeyFuncContext = None):
        self.elements = []
        self.getKeyFunc = getKeyFunc
        self.getKeyFuncContext = getKeyFuncContext
        
    def insert(self, object, key = None):
        insertToSortedArray(self.elements, object, self.getKeyFunc, key, self.getKeyFuncContext)
        
    def insertTail(self, object):
        self.elements.append(object)
        
    def walk(self, callback, context = None):
        elemCount = len(self.elements)
        for elemIndex in xrange(elemCount):
            curElem = self.elements[elemIndex]
            callbackResult = callback( curElem, context)
            if (callbackResult == self.FAW_STOP):
                return curElem
                
            elif (callbackResult == self.FAW_STOP_REMOVE):
                self.elements.pop(elemIndex)
                return curElem
                
            
        return None
        
    def getHead(self):
        return self.elements[0]
        
    def removeHead(self):
        return self.elements.pop(0)
        
    def getCount(self):
        return len(self.elements)
        
    

